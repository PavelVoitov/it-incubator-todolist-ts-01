{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","size","value","onChange","e","currentTarget","onKeyDown","key","label","helperText","IconButton","onClick","AddBox","style","color","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Todolist","onClickHandler","filter","todoListId","changeFilter","className","changeTodoTitle","removeTodoList","addTask","List","tasks","map","el","ListItem","id","isDone","padding","Checkbox","checked","event","taskID","changeStatus","changeTaskTitle","removeTask","ButtonGroup","aria-label","Button","App","todoList1","v1","todoList2","todoLists","setTodoLists","setTasks","taskId","updatedTasks","copyTasks","newTask","todoListTasks","changeTaskStatus","changeTodoFilter","todoListComponents","task","getTasksForTodoList","Grid","item","Paper","elevation","AppBar","position","Toolbar","justifyContent","edge","Menu","Typography","Container","fixed","container","newTodoListId","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.33a55673.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props:AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState<string>('');\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error) setError(false)\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title.trim());\r\n            setTitle('');\r\n        } else {\r\n            setError(true)\r\n        }\r\n    };\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n            setTitle('');\r\n        }\r\n    };\r\n\r\n    const userMessage =\r\n        error\r\n            ? <div style={{color: 'hotpink'}}>Title is require</div>\r\n            : <div>Please, create list item's title</div>\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                // style={{padding: 0, height: '5px'}}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyDown={onKeyPressHandler}\r\n                error={error}\r\n                label={'Title'}\r\n                helperText={error && 'Title is require!'}\r\n            />\r\n            <IconButton\r\n                onClick={addItem}>\r\n                <AddBox style={{color: 'db6b7c'}}/>\r\n            </IconButton>\r\n            {/*{userMessage}*/}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title);\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        props.changeTitle(title)\r\n        setEditMode(false)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n\r\n    const EnterChangeTitle = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                    variant={'standard'}\r\n                    value={title}\r\n                    autoFocus\r\n                    onBlur={offEditMode}\r\n                    onChange={changeTitle}\r\n                    onKeyDown={EnterChangeTitle}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>\r\n                    {props.title}\r\n              </span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, ButtonGroup, Checkbox, IconButton, List, ListItem} from \"@material-ui/core\";\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\n\r\n\r\ntype TodolistPropsType = {\r\n    removeTodoList: (todoListId: string) => void\r\n    filter: FilterValuesType\r\n    todoListId: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    changeFilter: (filter: FilterValuesType, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    changeTodoTitle: (title: string, todoListId: string) => void\r\n\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport const Todolist = (props: TodolistPropsType) => {\r\n\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todoListId)\r\n    };\r\n\r\n    const onClickHandler = (filter: FilterValuesType, todoListId: string) => {\r\n        return () => props.changeFilter(filter, todoListId);\r\n    };\r\n\r\n    const onRemoveTaskHandler = (id: string, todoListId: string) => {\r\n        props.removeTask(id, todoListId)\r\n    };\r\n\r\n    const onChangeHandler = (taskID: string, e: ChangeEvent<HTMLInputElement>, todoListId: string) => {\r\n        props.changeStatus(taskID, e.currentTarget.checked, todoListId)\r\n\r\n    }\r\n\r\n    const changeTodoTitle = (title: string) => {\r\n        props.changeTodoTitle(title, props.todoListId)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan\r\n                        title={props.title}\r\n                        changeTitle={changeTodoTitle}\r\n                    />\r\n                    <IconButton\r\n                        size='small'\r\n                        onClick={() => {\r\n                            props.removeTodoList(props.todoListId)\r\n                        }}\r\n                        color={'primary'}\r\n                    >\r\n                        <DeleteForeverIcon/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTask}/>\r\n                <List>\r\n                    {props.tasks.map(\r\n                        el => {\r\n                            const changeTaskTitle = (title: string) => {\r\n                                props.changeTaskTitle(el.id, title, props.todoListId)\r\n                            }\r\n                            return <ListItem\r\n                                        key={el.id}\r\n                                        className={el.isDone ? \"isDone\" : ''}\r\n                                        style={{padding: 0}}\r\n                            >\r\n                                <Checkbox\r\n                                    style={{color: 'd07684'}}\r\n                                    value=\"checkedA\"\r\n                                    checked={el.isDone}\r\n                                    onChange={(event) => onChangeHandler(el.id, event, props.todoListId)}\r\n                                />\r\n                                <EditableSpan\r\n                                    title={el.title}\r\n                                    changeTitle={changeTaskTitle}\r\n                                />\r\n                                <IconButton\r\n                                        size='small'\r\n                                        onClick={() => onRemoveTaskHandler(el.id, props.todoListId)}\r\n                                        color={'primary'}\r\n                                >\r\n                                        <DeleteForeverIcon/>\r\n                                </IconButton>\r\n                            </ListItem>\r\n                        })}\r\n                </List>\r\n                <div>\r\n                    <ButtonGroup size=\"small\" color=\"secondary\" aria-label=\"outlined primary button group\"\r\n                    >\r\n                        <Button\r\n                            color={props.filter === 'all' ? \"secondary\" : \"primary\"}\r\n                            onClick={onClickHandler('all', props.todoListId)}>All\r\n                        </Button>\r\n                        <Button\r\n                            color={props.filter === 'active' ? \"secondary\" : \"primary\"}\r\n                            onClick={onClickHandler('active', props.todoListId)}>Active\r\n                        </Button>\r\n                        <Button\r\n                            color={props.filter === 'completed' ? \"secondary\" : \"primary\"}\r\n                            onClick={onClickHandler('completed', props.todoListId)}>Completed\r\n                        </Button>\r\n                    </ButtonGroup>\r\n\r\n                </div>\r\n            </div>\r\n        </div>)\r\n};\r\n\r\n","import React, {useState} from 'react';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport './App.css';\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | 'active';\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [todoListId: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todoList1 = v1();\r\n    const todoList2 = v1();\r\n\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>(\r\n        [\r\n            {id: todoList1, title: 'What to learn', filter: \"all\"},\r\n            {id: todoList2, title: 'What to sell', filter: \"all\"},\r\n\r\n        ]\r\n    )\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoList1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false}\r\n        ],\r\n        [todoList2]: [\r\n            {id: v1(), title: \"Computer\", isDone: true},\r\n            {id: v1(), title: \"HTC VIVE\", isDone: false},\r\n\r\n        ]\r\n    })\r\n\r\n//tasks CRUD\r\n    const removeTask = (taskId: string, todoListId: string) => {\r\n        const todoListTasks = tasks[todoListId]\r\n        let updatedTasks = todoListTasks.filter((el) => el.id !== taskId);\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListId] = updatedTasks\r\n        setTasks(copyTasks);\r\n\r\n    };\r\n    const addTask = (title: string, todoListId: string) => {\r\n        let newTask = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        };\r\n        const todoListTasks = tasks[todoListId]\r\n        let updatedTasks = [newTask, ...todoListTasks]\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListId] = updatedTasks\r\n        setTasks(copyTasks);\r\n    };\r\n    const changeTaskStatus = (taskId: string, isDone: boolean, todoListId: string) => {\r\n        setTasks({\r\n            ...tasks, [todoListId]: tasks[todoListId].map(el => el.id === taskId ? {\r\n                ...el, isDone\r\n            } : el)\r\n        });\r\n    }\r\n    const changeTaskTitle = (taskId: string, title: string, todoListId: string) => {\r\n        setTasks({\r\n            ...tasks, [todoListId]: tasks[todoListId].map(el => el.id === taskId ? {\r\n                ...el, title\r\n            } : el)\r\n        });\r\n    }\r\n\r\n//todoList CRUD\r\n    const changeTodoFilter = (filter: FilterValuesType, todoListId: string) => {\r\n        setTodoLists(todoLists.map(el => el.id === todoListId ? {...el, filter} : el))\r\n    }\r\n    const changeTodoTitle = (title: string, todoListId: string) => {\r\n        setTodoLists(todoLists.map(el => el.id === todoListId ? {...el, title} : el))\r\n    }\r\n    const removeTodoList = (todoListId: string) => {\r\n        setTodoLists(todoLists.filter(el => el.id !== todoListId))\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        const newTodoListId = v1();\r\n        setTodoLists([...todoLists, {id: newTodoListId, title, filter: \"all\"}]);\r\n        setTasks({...tasks, [newTodoListId]: []})\r\n    }\r\n\r\n    const getTasksForTodoList = (todoLists: TodoListType) => {\r\n        if (todoLists.filter === 'active') {\r\n            return tasks[todoLists.id].filter(el => !el.isDone);\r\n        } else if (todoLists.filter === 'completed') {\r\n            return tasks[todoLists.id].filter(el => el.isDone);\r\n        } else {\r\n            return tasks[todoLists.id]\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const todoListComponents = todoLists.map(el => {\r\n            const task = getTasksForTodoList(el)\r\n\r\n            return (\r\n                <Grid item >\r\n                <Paper elevation={10} style={{padding: '20px 20px'}}>\r\n                        <Todolist\r\n                            changeFilter={changeTodoFilter}\r\n                            removeTodoList={removeTodoList}\r\n                            key={el.id}\r\n                            todoListId={el.id}\r\n                            filter={el.filter}\r\n                            title={el.title}\r\n                            tasks={task}\r\n                            removeTask={removeTask}\r\n                            addTask={addTask}\r\n                            changeStatus={changeTaskStatus}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodoTitle={changeTodoTitle}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n\r\n            )\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton\r\n                            edge={'start'}\r\n                            color={'inherit'}\r\n                            aria-label={'menu'}>\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button\r\n                     color={'inherit'}\r\n                     variant={'outlined'}\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                </Toolbar>\r\n\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}} justifyContent={'center'}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5} justifyContent={'center'}>\r\n                    {todoListComponents}\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}