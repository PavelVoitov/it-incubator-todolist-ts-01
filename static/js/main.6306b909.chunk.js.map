{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","userMessage","style","color","value","onChange","e","currentTarget","onKeyDown","key","className","onClick","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Todolist","onClickHandler","filter","todoListId","changeFilter","changeTodoTitle","removeTodoList","addTask","tasks","map","el","id","isDone","type","checked","event","taskID","changeStatus","changeTaskTitle","removeTask","App","todoList1","v1","todoList2","todoLists","setTodoLists","setTasks","taskId","updatedTasks","copyTasks","newTask","todoListTasks","changeTaskStatus","changeTodoFilter","todoListComponents","task","getTasksForTodoList","newTodoListId","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6306b909.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props:AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState<string>('');\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error) setError(false)\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title.trim());\r\n            setTitle('');\r\n        } else {\r\n            setError(true)\r\n        }\r\n    };\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n            setTitle('');\r\n        }\r\n    };\r\n\r\n    const userMessage =\r\n        error\r\n            ? <div style={{color: 'hotpink'}}>Title is require</div>\r\n            : <div>Please, create list item's title</div>\r\n\r\n\r\n    return (\r\n        <div>\r\n            <input value={title}\r\n                   onChange={changeTitle}\r\n                   onKeyDown={onKeyPressHandler}\r\n                   className={error ? \"error\" : ''}\r\n            />\r\n            <button onClick={addItem}>+</button>\r\n            {userMessage}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title);\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        props.changeTitle(title)\r\n        setEditMode(false)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n\r\n    const EnterChangeTitle = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input\r\n                value={title}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                onChange={changeTitle}\r\n                onKeyDown={EnterChangeTitle}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>\r\n                    {props.title}\r\n              </span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    removeTodoList: (todoListId: string) => void\r\n    filter: FilterValuesType\r\n    todoListId: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    changeFilter: (filter: FilterValuesType, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    changeTodoTitle: (title: string, todoListId: string) => void\r\n\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport const Todolist = (props: TodolistPropsType) => {\r\n\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todoListId)\r\n    };\r\n\r\n    const onClickHandler = (filter: FilterValuesType, todoListId: string) => {\r\n        return () => props.changeFilter(filter, todoListId);\r\n    };\r\n\r\n    const onRemoveTaskHandler = (id: string, todoListId: string) => {\r\n        props.removeTask(id, todoListId)\r\n    };\r\n\r\n    const onChangeHandler = (taskID: string, e: ChangeEvent<HTMLInputElement>, todoListId: string) => {\r\n        props.changeStatus(taskID, e.currentTarget.checked, todoListId)\r\n\r\n    }\r\n\r\n    const changeTodoTitle = (title: string) => {\r\n        props.changeTodoTitle(title, props.todoListId)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan\r\n                        title={props.title}\r\n                        changeTitle={changeTodoTitle}\r\n                    />\r\n                    <button onClick={() => {\r\n                        props.removeTodoList(props.todoListId)\r\n                    }}>X</button>\r\n                </h3>\r\n                <AddItemForm addItem={addTask}/>\r\n                <ul>\r\n                    {props.tasks.map(\r\n                        el => {\r\n                            const changeTaskTitle = (title: string) => {\r\n                                props.changeTaskTitle(el.id, title, props.todoListId)\r\n                            }\r\n                            return <li key={el.id} className={el.isDone ? \"isDone\" : ''}>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked={el.isDone}\r\n                                    onChange={(event) => onChangeHandler(el.id, event, props.todoListId)}\r\n                                />\r\n                                <EditableSpan\r\n                                    title={el.title}\r\n                                    changeTitle={changeTaskTitle}\r\n                                />\r\n                                <button onClick={() => onRemoveTaskHandler(el.id, props.todoListId)}>x</button>\r\n                            </li>\r\n                        })}\r\n                </ul>\r\n                <div>\r\n                    <button className={props.filter === 'all' ? \"active-filter\" : ''}\r\n                            onClick={onClickHandler('all', props.todoListId)}>All\r\n                    </button>\r\n                    <button className={props.filter === 'active' ? \"active-filter\" : ''}\r\n                            onClick={onClickHandler('active', props.todoListId)}>Active\r\n                    </button>\r\n                    <button className={props.filter === 'completed' ? \"active-filter\" : ''}\r\n                            onClick={onClickHandler('completed', props.todoListId)}>Completed\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n};\r\n\r\n","import React, {useState} from 'react';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport './App.css';\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | 'active';\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [todoListId: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todoList1 = v1();\r\n    const todoList2 = v1();\r\n\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>(\r\n        [\r\n            {id: todoList1, title: 'What to learn', filter: \"all\"},\r\n            {id: todoList2, title: 'What to sell', filter: \"all\"},\r\n\r\n        ]\r\n    )\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoList1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false}\r\n        ],\r\n        [todoList2]: [\r\n            {id: v1(), title: \"Computer\", isDone: true},\r\n            {id: v1(), title: \"HTC VIVE\", isDone: false},\r\n\r\n        ]\r\n    })\r\n\r\n//tasks CRUD\r\n    const removeTask = (taskId: string, todoListId: string) => {\r\n        const todoListTasks = tasks[todoListId]\r\n        let updatedTasks = todoListTasks.filter((el) => el.id !== taskId);\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListId] = updatedTasks\r\n        setTasks(copyTasks);\r\n\r\n    };\r\n    const addTask = (title: string, todoListId: string) => {\r\n        let newTask = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        };\r\n        const todoListTasks = tasks[todoListId]\r\n        let updatedTasks = [newTask, ...todoListTasks]\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListId] = updatedTasks\r\n        setTasks(copyTasks);\r\n    };\r\n    const changeTaskStatus = (taskId: string, isDone: boolean, todoListId: string) => {\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].map(el => el.id === taskId ? {\r\n                ...el, isDone} : el)});\r\n    }\r\n    const changeTaskTitle = (taskId: string, title: string, todoListId: string) => {\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].map(el => el.id === taskId ? {\r\n            ...el, title} : el)});\r\n    }\r\n\r\n//todoList CRUD\r\n    const changeTodoFilter = (filter: FilterValuesType, todoListId: string) => {\r\n        setTodoLists(todoLists.map(el => el.id === todoListId ? {...el, filter} : el))\r\n    }\r\n    const changeTodoTitle = (title: string, todoListId: string) => {\r\n        setTodoLists(todoLists.map(el => el.id === todoListId ? {...el, title} : el))\r\n    }\r\n    const removeTodoList = (todoListId: string) => {\r\n        setTodoLists(todoLists.filter(el => el.id !== todoListId))\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        const newTodoListId = v1();\r\n        setTodoLists([...todoLists, {id: newTodoListId, title, filter: \"all\"}]);\r\n        setTasks({...tasks, [newTodoListId]: []})\r\n    }\r\n\r\n    const getTasksForTodoList = (todoLists: TodoListType) => {\r\n        if (todoLists.filter === 'active') {\r\n           return  tasks[todoLists.id].filter(el => !el.isDone);\r\n        } else if (todoLists.filter === 'completed') {\r\n           return  tasks[todoLists.id].filter(el => el.isDone);\r\n        } else {\r\n            return tasks[todoLists.id]\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const todoListComponents = todoLists.map(el => {\r\n            const task = getTasksForTodoList(el)\r\n\r\n        return (<Todolist\r\n                            changeFilter={changeTodoFilter}\r\n                            removeTodoList={removeTodoList}\r\n                            key={el.id}\r\n                            todoListId={el.id}\r\n                            filter={el.filter}\r\n                            title={el.title}\r\n                            tasks={task}\r\n                            removeTask={removeTask}\r\n                            addTask={addTask}\r\n                            changeStatus={changeTaskStatus}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodoTitle={changeTodoTitle}\r\n\r\n                />\r\n            )\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList}/>\r\n            {todoListComponents}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}