{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","reducers/todolists-reducer.ts","EditableSpan.tsx","reducers/tasks-reducer.ts","TodolistWithRedux.tsx","AppWithRedux.tsx","reducers/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","size","value","onChange","e","currentTarget","onKeyDown","key","label","helperText","IconButton","onClick","AddBox","style","color","initialState","ChangeTodoFilterAC","id","filter","type","todoListId","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","TodolistWithRedux","tasks","useSelector","state","dispatch","useDispatch","el","isDone","className","ChangeTodoTitleAC","addTaskAC","List","map","ListItem","padding","Checkbox","checked","newIsDoneValue","taskId","todolistId","changeTaskTitleAC","ButtonGroup","aria-label","Button","App","todoLists","todolists","todoListComponents","Grid","item","Paper","elevation","AppBar","position","Toolbar","justifyContent","edge","Menu","Typography","Container","fixed","container","action","v1","AddTodoListAC","spacing","rootReducer","combineReducers","t","newTaskId","copyState","store","legacy_createStore","ReactDOM","render","AppWithRedux","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.80821a1f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props:AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState<string>('');\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error) setError(false)\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title.trim());\r\n            setTitle('');\r\n        } else {\r\n            setError(true)\r\n        }\r\n    };\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n            setTitle('');\r\n        }\r\n    };\r\n\r\n    const userMessage =\r\n        error\r\n            ? <div style={{color: 'hotpink'}}>Title is require</div>\r\n            : <div>Please, create list item's title</div>\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                // style={{padding: 0, height: '5px'}}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyDown={onKeyPressHandler}\r\n                error={error}\r\n                label={'Title'}\r\n                helperText={error && 'Title is require!'}\r\n            />\r\n            <IconButton\r\n                onClick={addItem}>\r\n                <AddBox style={{color: 'db6b7c'}}/>\r\n            </IconButton>\r\n            {/*{userMessage}*/}\r\n        </div>\r\n    )\r\n}","\r\nimport {FilterValuesType, TasksStateType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type RemoveTodoListAT = {\r\n    type: 'REMOVE-TODOLIST'\r\n    todoListId: string\r\n}\r\n\r\nexport type AddTodoListAT = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype ChangeTodoFilterAT = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    filter: FilterValuesType\r\n    todoListId: string\r\n}\r\n\r\ntype ChangeTodoTitleAT = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype ActionType = RemoveTodoListAT | AddTodoListAT | ChangeTodoFilterAT | ChangeTodoTitleAT\r\n\r\nconst initialState : Array<TodoListType> = []\r\n\r\nexport const todolistsReducer = (todoLists: Array<TodoListType> = initialState, action: ActionType) : Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\":\r\n            return todoLists.filter(el => el.id !== action.todoListId);\r\n        case 'ADD-TODOLIST':\r\n            return [...todoLists, {id: action.todoListId, title: action.title, filter: \"all\"}]\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return todoLists.map(el => el.id === action.todoListId ? {...el, filter: action.filter} : el)\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return todoLists.map(el => el.id === action.todoListId ? {...el, title: action.title} : el)\r\n\r\n        default:\r\n            return todoLists\r\n    }\r\n}\r\n\r\n\r\nexport const RemoveTodoListAC = (id: string): RemoveTodoListAT => ({type: \"REMOVE-TODOLIST\", todoListId: id})\r\nexport const AddTodoListAC = (title: string): AddTodoListAT => ({type: \"ADD-TODOLIST\", title, todoListId: v1()})\r\nexport const ChangeTodoFilterAC = (id: string, filter: FilterValuesType): ChangeTodoFilterAT => ({type: 'CHANGE-TODOLIST-FILTER', todoListId: id, filter})\r\nexport const ChangeTodoTitleAC = (title: string, id: string): ChangeTodoTitleAT => ({type: 'CHANGE-TODOLIST-TITLE', title, todoListId: id})\r\n\r\n\r\n","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title);\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        props.changeTitle(title)\r\n        setEditMode(false)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n\r\n    const EnterChangeTitle = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                    variant={'standard'}\r\n                    value={title}\r\n                    autoFocus\r\n                    onBlur={offEditMode}\r\n                    onChange={changeTitle}\r\n                    onKeyDown={EnterChangeTitle}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>\r\n                    {props.title}\r\n              </span>\r\n    )\r\n}","\r\nimport {FilterValuesType, TasksStateType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListAT, RemoveTodoListAT} from \"./todolists-reducer\";\r\n\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\n\r\ntype AddTaskActionType = ReturnType<typeof addTaskAC>\r\n\r\ntype changeTaskStatusActionType = ReturnType<typeof changeTaskStatusAC>\r\n\r\ntype changeTaskTitleActionType = ReturnType<typeof changeTaskTitleAC>\r\n\r\n\r\n\r\ntype ActionType = RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | changeTaskStatusActionType\r\n    | changeTaskTitleActionType\r\n    | AddTodoListAT\r\n    | RemoveTodoListAT\r\n\r\nconst initialState : TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType) : TasksStateType => {\r\n\r\n\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case 'ADD-TASK':\r\n            const newTaskId = v1()\r\n            return {\r\n                ...state,\r\n               [action.todoListId]: [{id: newTaskId, title: action.title, isDone: false}, ...state[action.todoListId]],\r\n            }\r\n        case \"CHANGE-TASK-STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id !== action.taskId ? t : {...t, isDone: action.isDone})\r\n            }\r\n        case \"CHANGE-TASK-TITLE\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id !== action.taskId ? t : {...t, title: action.title})\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: []\r\n            }\r\n        case 'REMOVE-TODOLIST':\r\n            let copyState = {...state}\r\n            delete copyState[action.todoListId]\r\n            return copyState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string)=> {return {type: 'REMOVE-TASK', taskId, todolistId} as const}\r\nexport const addTaskAC = (title: string, todoListId: string) => {return {type: 'ADD-TASK', title, todoListId} as const}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string) => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, isDone, todolistId} as const\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId} as const\r\n}\r\nconst RemoveTodolistAC = (todolistId: string) => {return{type: 'REMOVE-TODOLIST', todolistId} as const}\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType} from \"./AppWithRedux\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, ButtonGroup, Checkbox, IconButton, List, ListItem} from \"@material-ui/core\";\r\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./reducers/store\";\r\nimport {TaskType} from \"./Todolist\";\r\nimport {ChangeTodoFilterAC, ChangeTodoTitleAC, RemoveTodoListAC} from \"./reducers/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./reducers/tasks-reducer\";\r\n\r\nexport type TodolistWithReduxPropsType = {\r\n    todoListId: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const TodolistWithRedux = ({todoListId, title, filter}: TodolistWithReduxPropsType) => {\r\n\r\n    let tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[todoListId])\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const changeTodoTitle = (title: string) => {\r\n        dispatch(ChangeTodoTitleAC(title, todoListId))\r\n    }\r\n\r\n    const removeTodoList = () => {\r\n        dispatch(RemoveTodoListAC(todoListId))\r\n    }\r\n\r\n    const addTask = () => {\r\n        dispatch(addTaskAC(title, todoListId))\r\n    }\r\n\r\n    const onAllClickHandler = () => {\r\n        dispatch(ChangeTodoFilterAC(todoListId, 'all'))\r\n    };\r\n    const onActiveClickHandler = () => {\r\n        dispatch(ChangeTodoFilterAC(todoListId, 'active'))\r\n    };\r\n    const onCompletedClickHandler = () => {\r\n        dispatch(ChangeTodoFilterAC(todoListId, 'completed'))\r\n    };\r\n\r\n    if (filter === 'active') {\r\n        tasks = tasks.filter(el => !el.isDone);\r\n    }\r\n    if (filter === 'completed') {\r\n        tasks = tasks.filter(el => el.isDone);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan\r\n                        title={title}\r\n                        changeTitle={changeTodoTitle}\r\n                    />\r\n                    <IconButton\r\n                        size='small'\r\n                        onClick={removeTodoList}\r\n                        color={'primary'}\r\n                    >\r\n                        <DeleteForeverIcon/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTask}/>\r\n                <List>\r\n                    {tasks.map(el => {\r\n                        const onRemoveTaskHandler = () => dispatch(removeTaskAC(el.id, todoListId))\r\n                        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) =>  {\r\n                            let newIsDoneValue = e.currentTarget.checked\r\n                            dispatch(changeTaskStatusAC(el.id, newIsDoneValue, todoListId))\r\n                        }\r\n                            const changeTaskTitle = (title: string) => {\r\n                                dispatch(changeTaskTitleAC(el.id, title, todoListId))\r\n                            }\r\n\r\n                            return <ListItem\r\n                                key={el.id}\r\n                                className={el.isDone ? \"isDone\" : ''}\r\n                                style={{padding: 0}}\r\n                            >\r\n                                <Checkbox\r\n                                    style={{color: 'd07684'}}\r\n                                    value=\"checkedA\"\r\n                                    checked={el.isDone}\r\n                                    onChange={onChangeHandler}\r\n                                />\r\n                                <EditableSpan\r\n                                    title={el.title}\r\n                                    changeTitle={changeTaskTitle}\r\n                                />\r\n                                <IconButton\r\n                                    size='small'\r\n                                    onClick={onRemoveTaskHandler}\r\n                                    color={'primary'}\r\n                                >\r\n                                    <DeleteForeverIcon/>\r\n                                </IconButton>\r\n                            </ListItem>\r\n                        })}\r\n                </List>\r\n                <div>\r\n                    <ButtonGroup size=\"small\" color=\"secondary\" aria-label=\"outlined primary button group\"\r\n                    >\r\n                        <Button\r\n                            color={filter === 'all' ? \"secondary\" : \"primary\"}\r\n                            onClick={onAllClickHandler}>All\r\n                        </Button>\r\n                        <Button\r\n                            color={filter === 'active' ? \"secondary\" : \"primary\"}\r\n                            onClick={onActiveClickHandler}>Active\r\n                        </Button>\r\n                        <Button\r\n                            color={filter === 'completed' ? \"secondary\" : \"primary\"}\r\n                            onClick={onCompletedClickHandler}>Completed\r\n                        </Button>\r\n                    </ButtonGroup>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {AddTodoListAC} from \"./reducers/todolists-reducer\";\r\nimport {AppRootStateType} from \"./reducers/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {TodolistWithRedux} from './TodolistWithRedux'\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | 'active';\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\n// export type TasksStateType = {\r\n//     [todoListId: string]: Array<TaskType>\r\n// }\r\n\r\nfunction App() {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todolists)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addTodoList = (title: string) => {\r\n        let action = AddTodoListAC(title)\r\n        dispatch(action)\r\n    }\r\n\r\n    const todoListComponents = todoLists.map(el => {\r\n            return (\r\n                <Grid key={el.id} item>\r\n                    <Paper elevation={10} style={{padding: '20px 20px'}}>\r\n                        <TodolistWithRedux\r\n                            todoListId={el.id}\r\n                            filter={el.filter}\r\n                            title={el.title}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            )\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton\r\n                        edge={'start'}\r\n                        color={'inherit'}\r\n                        aria-label={'menu'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button\r\n                        color={'inherit'}\r\n                        variant={'outlined'}\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                </Toolbar>\r\n\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}} justifyContent={'center'}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5} justifyContent={'center'}>\r\n                    {todoListComponents}\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {tasksReducer} from './tasks-reducer'\r\nimport {combineReducers, legacy_createStore} from \"redux\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n\r\nexport const store = legacy_createStore(rootReducer);\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithReducer from \"./AppWithReducer\";\r\nimport {create} from \"domain\";\r\nimport {Provider} from \"react-redux\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {store} from \"./reducers/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// const container = document.getElementById('root') as HTMLElement\r\n// const root = creatRoot(container)\r\n// root.render(<Provider store={store}>\r\n//         <AppWithRedux/>\r\n//     </Provider>)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}