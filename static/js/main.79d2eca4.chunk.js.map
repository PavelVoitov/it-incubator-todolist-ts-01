{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","reducers/tasks-reducer.ts","reducers/todolists-reducer.ts","AppWithRedux.tsx","reducers/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","size","value","onChange","e","currentTarget","onKeyDown","key","label","helperText","IconButton","onClick","AddBox","style","color","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Task","task","changeTaskTitle","changeTaskStatus","removeTask","id","className","isDone","Checkbox","checked","newIsDoneValue","newValue","Delete","Todolist","addTask","useCallback","removeTodolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","taskId","onChangeHandler","status","onTitleChangeHandler","map","paddingTop","Button","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","todolistId","action","type","removeTaskAC","todoListId","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","removeTodolistAC","changeTodolistTitleAC","addTodolist","v1","addTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","item","Paper","rootReducer","combineReducers","newTaskId","copyState","todoLists","el","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","legacy_createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.79d2eca4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props:AddItemFormPropsType) => {\r\n    console.log('AddItemForm')\r\n    const [title, setTitle] = useState<string>('');\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error) setError(false)\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title.trim());\r\n            setTitle('');\r\n        } else {\r\n            setError(true)\r\n        }\r\n    };\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if  (error) setError(false);\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n            setTitle('');\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyDown={onKeyPressHandler}\r\n                error={error}\r\n                label={'Title'}\r\n                helperText={error && 'Title is require!'}\r\n            />\r\n            <IconButton\r\n                onClick={addItem}>\r\n                <AddBox style={{color: 'db6b7c'}}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title);\r\n    const onEditMode = () => setEditMode(true)\r\n\r\n    const offEditMode = () => {\r\n        props.changeTitle(title)\r\n        setEditMode(false)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n\r\n    const EnterChangeTitle = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                    variant={'standard'}\r\n                    value={title}\r\n                    autoFocus\r\n                    onBlur={offEditMode}\r\n                    onChange={changeTitle}\r\n                    onKeyDown={EnterChangeTitle}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>\r\n                    {props.title}\r\n              </span>\r\n    )\r\n})","import {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    changeTaskStatus: (id: string, isDone: boolean) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string) => void\r\n    removeTask: (taskId: string) => void\r\n}\r\n\r\nexport const Task = React.memo(({task, changeTaskTitle, changeTaskStatus, removeTask} : TaskPropsType) => {\r\n    console.log('Task')\r\n    const onClickHandler = () => removeTask(task.id)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        changeTaskStatus(task.id, newIsDoneValue);\r\n    }\r\n    const onTitleChangeHandler = (newValue: string) => {\r\n        changeTaskTitle(task.id, newValue);\r\n    }\r\n\r\n    return (\r\n            <div key={task.id} className={task.isDone ? \"is-done\" : \"\"}>\r\n                <Checkbox\r\n                    checked={task.isDone}\r\n                    color=\"primary\"\r\n                    onChange={onChangeHandler}\r\n                />\r\n\r\n                <EditableSpan title={task.title} changeTitle={onTitleChangeHandler} />\r\n                <IconButton onClick={onClickHandler}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </div>\r\n    )\r\n})","import React, { useCallback} from 'react';\r\nimport {FilterValuesType} from './AppWithRedux';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Task} from \"./Task\";\r\n\r\n\r\n\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    console.log('Todolist')\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [props.id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.id);\r\n    }, [props.id])\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }, [])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id), [\"all\", props.id]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id), [\"active\", props.id]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id), [\"completed\", props.id]);\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => !t.isDone);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.isDone);\r\n    }\r\n\r\n    const removeTask = useCallback((taskId: string) => props.removeTask(taskId, props.id), [props.removeTask, props.id])\r\n    const onChangeHandler = useCallback((taskId: string, status: boolean) => {\r\n        props.changeTaskStatus(taskId, status, props.id);\r\n    }, [props.changeTaskStatus, props.id])\r\n    const onTitleChangeHandler = useCallback((taskId: string, newValue: string) => {\r\n        props.changeTaskTitle(taskId, newValue, props.id);\r\n    }, [props.changeTaskTitle, props.id])\r\n\r\n    return <div>\r\n        <h3> <EditableSpan title={props.title} changeTitle={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return <Task key={t.id}\r\n                                 task={t}\r\n                                 changeTaskStatus={onChangeHandler}\r\n                                 removeTask={removeTask}\r\n                                 changeTaskTitle={onTitleChangeHandler}/>\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","\r\nimport {FilterValuesType, TasksStateType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListAT, RemoveTodoListAT} from \"./todolists-reducer\";\r\n\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\n\r\ntype AddTaskActionType = ReturnType<typeof addTaskAC>\r\n\r\ntype changeTaskStatusActionType = ReturnType<typeof changeTaskStatusAC>\r\n\r\ntype changeTaskTitleActionType = ReturnType<typeof changeTaskTitleAC>\r\n\r\n\r\n\r\ntype ActionType = RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | changeTaskStatusActionType\r\n    | changeTaskTitleActionType\r\n    | AddTodoListAT\r\n    | RemoveTodoListAT\r\n\r\nconst initialState : TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType) : TasksStateType => {\r\n\r\n\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case 'ADD-TASK':\r\n            const newTaskId = v1()\r\n            return {\r\n                ...state,\r\n               [action.todoListId]: [{id: newTaskId, title: action.title, isDone: false}, ...state[action.todoListId]],\r\n            }\r\n        case \"CHANGE-TASK-STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id !== action.taskId ? t : {...t, isDone: action.isDone})\r\n            }\r\n        case \"CHANGE-TASK-TITLE\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id !== action.taskId ? t : {...t, title: action.title})\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: []\r\n            }\r\n        case 'REMOVE-TODOLIST':\r\n            let copyState = {...state}\r\n            delete copyState[action.todoListId]\r\n            return copyState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string)=> {return {type: 'REMOVE-TASK', taskId, todolistId} as const}\r\nexport const addTaskAC = (title: string, todoListId: string) => {return {type: 'ADD-TASK', title, todoListId} as const}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string) => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, isDone, todolistId} as const\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId} as const\r\n}\r\nconst RemoveTodolistAC = (todolistId: string) => {return{type: 'REMOVE-TODOLIST', todolistId} as const}\r\n\r\n\r\n\r\n\r\n","\r\nimport {FilterValuesType, TasksStateType, TodolistType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type RemoveTodoListAT = {\r\n    type: 'REMOVE-TODOLIST'\r\n    todoListId: string\r\n}\r\n\r\nexport type AddTodoListAT = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype ChangeTodoFilterAT = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    filter: FilterValuesType\r\n    todoListId: string\r\n}\r\n\r\ntype ChangeTodoTitleAT = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype ActionType = RemoveTodoListAT | AddTodoListAT | ChangeTodoFilterAT | ChangeTodoTitleAT\r\n\r\nconst initialState : Array<TodolistType> = []\r\n\r\nexport const todolistsReducer = (todoLists: Array<TodolistType> = initialState, action: ActionType) : Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\":\r\n            return todoLists.filter(el => el.id !== action.todoListId);\r\n        case 'ADD-TODOLIST':\r\n            return [...todoLists, {id: action.todoListId, title: action.title, filter: \"all\"}]\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return todoLists.map(el => el.id === action.todoListId ? {...el, filter: action.filter} : el)\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return todoLists.map(el => el.id === action.todoListId ? {...el, title: action.title} : el)\r\n\r\n        default:\r\n            return todoLists\r\n    }\r\n}\r\n\r\n\r\nexport const removeTodolistAC = (id: string): RemoveTodoListAT => ({type: \"REMOVE-TODOLIST\", todoListId: id})\r\nexport const addTodolistAC = (title: string): AddTodoListAT => ({type: \"ADD-TODOLIST\", title, todoListId: v1()})\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodoFilterAT => ({type: 'CHANGE-TODOLIST-FILTER', todoListId: id, filter})\r\nexport const changeTodolistTitleAC = (id: string, title: string,): ChangeTodoTitleAT => ({type: 'CHANGE-TODOLIST-TITLE',todoListId: id, title})\r\n\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './reducers/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './reducers/store';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n} from \"./reducers/todolists-reducer\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        const action = addTaskAC(title, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string)=>  {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasks[tl.id]}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer'\r\nimport {combineReducers, compose, legacy_createStore} from \"redux\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = legacy_createStore(rootReducer, composeEnhancers());\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {store} from \"./reducers/store\";\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// const container = document.getElementById('root') as HTMLElement\r\n// const root = creatRoot(container)\r\n// root.render(<Provider store={store}>\r\n//         <AppWithRedux/>\r\n//     </Provider>)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}